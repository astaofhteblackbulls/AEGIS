import logging
import json
import os
from flask import request, jsonify, Blueprint, render_template, send_from_directory
from typing import Dict, Any

from aegis.utils import (
    validate_data,
    preprocess_data,
    log_data_point,
    log_anomaly,
    check_for_malware,
    get_recent_logs
)
from aegis.ml_model import predict_anomaly, get_model, train_model_with_data, save_model
from aegis.config import DEFAULT_LOG_ENTRIES

# Create Blueprint for API routes
api = Blueprint('api', __name__)

# Create Blueprint for web routes
web = Blueprint('web', __name__, template_folder='templates', static_folder='static')

@api.route('/ingest-data', methods=['POST'])
def ingest_data():
    """
    Endpoint to ingest sensor data.
    
    Expects JSON with:
    - timestamp
    - device_id
    - temperature
    - pressure
    - rpm
    
    Returns:
    - JSON with status and message
    """
    try:
        data = request.json
        
        # Validate incoming data
        is_valid, error_message = validate_data(data)
        if not is_valid:
            return jsonify({
                "status": "error",
                "message": error_message
            }), 400
        
        # Preprocess the data
        processed_data = preprocess_data(data)
        
        # Store data in database
        from aegis.models import db, Device, SensorData
        
        # Get or create device
        device = Device.get_or_create(processed_data.get('device_id'))
        device.update_last_seen()
        
        # Create sensor data record
        sensor_data = SensorData.from_dict(processed_data, device)
        db.session.add(sensor_data)
        db.session.commit()
        
        # Also log to file for backward compatibility
        success = log_data_point(processed_data)
        if not success:
            logging.warning("Failed to log data point to file, but database record was created")
        
        return jsonify({
            "status": "success",
            "message": "Data ingested successfully",
            "data": processed_data
        })
        
    except Exception as e:
        logging.error(f"Error in ingest_data endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/detect-anomaly', methods=['POST'])
def detect_anomaly():
    """
    Endpoint to detect anomalies in sensor data.
    
    Expects JSON with:
    - timestamp
    - device_id
    - temperature
    - pressure
    - rpm
    
    Returns:
    - JSON with anomaly detection results
    """
    try:
        data = request.json
        
        # Validate incoming data
        is_valid, error_message = validate_data(data)
        if not is_valid:
            return jsonify({
                "status": "error",
                "message": error_message
            }), 400
        
        # Check if model is loaded
        model = get_model()
        if model is None:
            return jsonify({
                "status": "error",
                "message": "Model not loaded. Please train or load a model first."
            }), 500
        
        # Preprocess the data
        processed_data = preprocess_data(data)
        
        # Predict anomaly
        is_anomaly, anomaly_score, message = predict_anomaly(processed_data)
        
        # Check for potential malware if it's an anomaly
        potential_malware = False
        anomaly_count = 0
        
        if is_anomaly:
            # Log the anomaly to file system
            log_anomaly(processed_data, anomaly_score)
            
            # Check for malware pattern
            device_id = processed_data.get("device_id", "unknown")
            potential_malware, anomaly_count = check_for_malware(device_id)
            
            # Store anomaly in database
            from aegis.models import db, Device, Anomaly
            
            # Get or create device
            device = Device.get_or_create(device_id)
            device.update_last_seen()
            
            # Mark device as compromised if potential malware is detected
            if potential_malware:
                device.status = 'compromised'
                db.session.commit()
                
            # Create anomaly record
            anomaly_record = Anomaly.from_dict(
                processed_data, 
                device, 
                anomaly_score, 
                potential_malware
            )
            db.session.add(anomaly_record)
            db.session.commit()
            
            # Emit real-time alert via WebSocket
            from aegis.app import emit_anomaly_alert
            emit_anomaly_alert(processed_data, anomaly_score, potential_malware, anomaly_count)
        
        # Prepare response
        response = {
            "status": "success",
            "anomaly": bool(is_anomaly),  # Ensure it's a proper JSON boolean
            "score": float(anomaly_score),  # Ensure it's a proper JSON number
            "message": str(message),  # Ensure it's a proper JSON string
            "potential_malware": bool(potential_malware)  # Ensure it's a proper JSON boolean
        }
        
        # Include additional details if there's potential malware
        if potential_malware:
            response["malware_details"] = {
                "device_id": str(processed_data.get("device_id", "unknown")),
                "anomaly_count": int(anomaly_count),
                "message": "Multiple anomalies detected in short timeframe, possible malware interference"
            }
        
        return jsonify(response)
        
    except Exception as e:
        logging.error(f"Error in detect_anomaly endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/logs', methods=['GET'])
def get_logs():
    """
    Endpoint to retrieve recent logs.
    
    Query parameters:
    - count: Number of log entries to retrieve (default: DEFAULT_LOG_ENTRIES)
    - device_id: Optional device ID to filter logs
    
    Returns:
    - JSON with recent data logs and alerts
    """
    try:
        # Get count from query params, default to DEFAULT_LOG_ENTRIES
        count = request.args.get('count', DEFAULT_LOG_ENTRIES, type=int)
        device_id = request.args.get('device_id')
        
        # Import database models
        from aegis.models import db, Device, SensorData, Anomaly
        
        # Prepare response data
        response_data = {
            "data_logs": [],
            "alerts": []
        }
        
        # Query sensor data from database
        sensor_query = SensorData.query.order_by(SensorData.received_at.desc()).limit(count)
        
        # Filter by device_id if provided
        if device_id:
            device = Device.query.filter_by(device_id=device_id).first()
            if device:
                sensor_query = SensorData.query.filter_by(device_id=device.id).order_by(SensorData.received_at.desc()).limit(count)
        
        # Get sensor data
        sensor_data = sensor_query.all()
        
        # Convert to dictionaries for JSON response
        for data in sensor_data:
            device = Device.query.get(data.device_id)
            response_data["data_logs"].append({
                "timestamp": data.timestamp.isoformat(),
                "device_id": device.device_id,
                "temperature": data.temperature,
                "pressure": data.pressure,
                "rpm": data.rpm,
                "received_at": data.received_at.timestamp()
            })
        
        # Query anomalies from database
        anomaly_query = Anomaly.query.order_by(Anomaly.detected_at.desc()).limit(count)
        
        # Filter by device_id if provided
        if device_id and device:
            anomaly_query = Anomaly.query.filter_by(device_id=device.id).order_by(Anomaly.detected_at.desc()).limit(count)
        
        # Get anomalies
        anomalies = anomaly_query.all()
        
        # Convert to alert log format for backward compatibility
        for anomaly in anomalies:
            device = Device.query.get(anomaly.device_id)
            malware_text = ", POTENTIAL MALWARE DETECTED" if anomaly.is_malware else ""
            
            log_entry = f"[{anomaly.detected_at.strftime('%Y-%m-%d %H:%M:%S')}] ANOMALY DETECTED: " \
                        f"Device {device.device_id}, Score: {anomaly.anomaly_score}, " \
                        f"Data: temperature={anomaly.temperature}, pressure={anomaly.pressure}, " \
                        f"rpm={anomaly.rpm}{malware_text}"
            
            response_data["alerts"].append(log_entry)
        
        # Also include file-based logs for backward compatibility
        file_logs = get_recent_logs(count)
        
        # Merge file logs with database logs, keeping the most recent
        if not device_id:  # Only merge if not filtering by device
            # For data logs
            response_data["data_logs"] = sorted(
                response_data["data_logs"] + file_logs.get("data_logs", []),
                key=lambda x: x.get("timestamp", ""),
                reverse=True
            )[:count]
            
            # For alerts, just append (they're already in order)
            response_data["alerts"] = response_data["alerts"] + file_logs.get("alerts", [])
            response_data["alerts"] = response_data["alerts"][:count]
        
        return jsonify({
            "status": "success",
            "logs": response_data
        })
        
    except Exception as e:
        logging.error(f"Error in get_logs endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/train', methods=['POST'])
def train_model():
    """
    Endpoint to train a new model with provided data.
    
    Expects JSON with:
    - data: List of data points with MODEL_FEATURES columns
    
    Returns:
    - JSON with training results
    """
    try:
        # Get training data from request
        request_data = request.json
        
        if not request_data or "data" not in request_data:
            return jsonify({
                "status": "error",
                "message": "Training data not provided"
            }), 400
        
        # Convert to DataFrame
        import pandas as pd
        import numpy as np
        from aegis.config import MODEL_FEATURES
        
        try:
            data = pd.DataFrame(request_data["data"])
        except Exception as e:
            return jsonify({
                "status": "error",
                "message": f"Error parsing training data: {str(e)}"
            }), 400
        
        # Check for required features
        missing_features = [f for f in MODEL_FEATURES if f not in data.columns]
        if missing_features:
            return jsonify({
                "status": "error",
                "message": f"Missing required features: {', '.join(missing_features)}"
            }), 400
        
        # Train new model
        # Already imported from aegis.ml_model
        
        model = train_model_with_data(data)
        success = save_model(model, training_data_size=len(data))
        
        if not success:
            return jsonify({
                "status": "error",
                "message": "Failed to save the trained model"
            }), 500
        
        return jsonify({
            "status": "success",
            "message": "Model trained and saved successfully",
            "details": {
                "n_samples": len(data),
                "features": MODEL_FEATURES
            }
        })
        
    except Exception as e:
        logging.error(f"Error in train_model endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

# API endpoint for model information
@api.route('/model', methods=['GET'])
def get_model_info():
    """
    Endpoint to get information about the currently active model.
    
    Returns:
    - JSON with model details
    """
    try:
        from aegis.models import ModelMetadata
        
        # Get the active model metadata
        model_metadata = ModelMetadata.get_active_model()
        
        if not model_metadata:
            return jsonify({
                "status": "warning",
                "message": "No active model found in database",
                "model": {
                    "version": "default",
                    "created_at": None,
                    "features": MODEL_FEATURES,
                    "training_samples": 0
                }
            })
        
        # Convert to dictionary
        import json
        model_data = {
            "version": model_metadata.version,
            "created_at": model_metadata.created_at.isoformat(),
            "features": json.loads(model_metadata.features) if model_metadata.features else MODEL_FEATURES,
            "parameters": json.loads(model_metadata.parameters) if model_metadata.parameters else {},
            "training_samples": model_metadata.training_samples,
            "performance_metrics": json.loads(model_metadata.performance_metrics) if model_metadata.performance_metrics else {}
        }
        
        return jsonify({
            "status": "success",
            "model": model_data
        })
        
    except Exception as e:
        logging.error(f"Error in get_model_info endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

# API endpoints for device management
@api.route('/devices', methods=['GET'])
def get_devices():
    """
    Endpoint to get all devices and their statuses.
    
    Returns:
    - JSON with devices and their details
    """
    try:
        from aegis.models import Device
        
        # Get all devices
        devices = Device.query.all()
        
        # Convert to list of dictionaries
        device_list = []
        for device in devices:
            device_list.append({
                "id": device.id,
                "device_id": device.device_id,
                "name": device.name,
                "description": device.description,
                "status": device.status,
                "last_seen": device.last_seen.isoformat() if device.last_seen else None,
                "created_at": device.created_at.isoformat()
            })
        
        return jsonify({
            "status": "success",
            "devices": device_list
        })
        
    except Exception as e:
        logging.error(f"Error in get_devices endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/devices/<device_id>', methods=['GET'])
def get_device(device_id):
    """
    Endpoint to get a specific device by its ID.
    
    Returns:
    - JSON with device details
    """
    try:
        from aegis.models import Device
        
        # Get the device
        device = Device.query.filter_by(device_id=device_id).first()
        
        if not device:
            return jsonify({
                "status": "error",
                "message": f"Device with ID {device_id} not found"
            }), 404
        
        # Convert to dictionary
        device_data = {
            "id": device.id,
            "device_id": device.device_id,
            "name": device.name,
            "description": device.description,
            "status": device.status,
            "last_seen": device.last_seen.isoformat() if device.last_seen else None,
            "created_at": device.created_at.isoformat()
        }
        
        return jsonify({
            "status": "success",
            "device": device_data
        })
        
    except Exception as e:
        logging.error(f"Error in get_device endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/devices/<device_id>', methods=['PUT'])
def update_device(device_id):
    """
    Endpoint to update a device's information.
    
    Expects JSON with device fields to update:
    - name (optional)
    - description (optional)
    - status (optional)
    
    Returns:
    - JSON with updated device details
    """
    try:
        from aegis.models import db, Device
        
        # Get the device
        device = Device.query.filter_by(device_id=device_id).first()
        
        if not device:
            return jsonify({
                "status": "error",
                "message": f"Device with ID {device_id} not found"
            }), 404
        
        # Get update data
        data = request.json
        
        # Update fields if provided
        if data.get('name') is not None:
            device.name = data['name']
            
        if data.get('description') is not None:
            device.description = data['description']
            
        if data.get('status') is not None:
            # Validate status
            valid_statuses = ['active', 'inactive', 'compromised']
            if data['status'] not in valid_statuses:
                return jsonify({
                    "status": "error",
                    "message": f"Invalid status: {data['status']}. Must be one of: {', '.join(valid_statuses)}"
                }), 400
                
            device.status = data['status']
        
        # Save changes
        db.session.commit()
        
        # Return updated device data
        device_data = {
            "id": device.id,
            "device_id": device.device_id,
            "name": device.name,
            "description": device.description,
            "status": device.status,
            "last_seen": device.last_seen.isoformat() if device.last_seen else None,
            "created_at": device.created_at.isoformat()
        }
        
        return jsonify({
            "status": "success",
            "message": "Device updated successfully",
            "device": device_data
        })
        
    except Exception as e:
        logging.error(f"Error in update_device endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

# Web Routes
@web.route('/')
def index():
    """Render the dashboard page"""
    return render_template('dashboard.html')

@web.route('/logs')
def logs_page():
    """Render the logs page"""
    return render_template('logs.html')

@web.route('/training')
def training_page():
    """Render the training page"""
    return render_template('training.html')

# Add a devices page
@web.route('/devices')
def devices_page():
    """Render the devices page"""
    from aegis.models import Device
    devices = Device.query.all()
    return render_template('dashboard.html', devices=devices)

# Training API endpoints for frontend
@api.route('/train-synthetic', methods=['POST'])
def train_synthetic():
    """Train model with synthetic data"""
    try:
        import time
        from aegis.train_model import generate_synthetic_data, create_model

        # Get parameters
        params = request.json or {}
        sample_count = int(params.get('sample_count', 5000))
        contamination = float(params.get('contamination', 0.1))
        
        # Validate parameters
        if sample_count < 1000 or sample_count > 50000:
            return jsonify({
                "status": "error",
                "message": "Sample count must be between 1,000 and 50,000"
            }), 400
            
        if contamination < 0.01 or contamination > 0.5:
            return jsonify({
                "status": "error",
                "message": "Contamination rate must be between 0.01 and 0.5"
            }), 400
        
        # Generate synthetic data
        start_time = time.time()
        training_data = generate_synthetic_data(n_samples=sample_count, contamination=contamination)
        
        # Create and train model
        from aegis.config import MODEL_FEATURES
        model = create_model()
        model.fit(training_data[MODEL_FEATURES].values)
        
        # Save the model
        success = save_model(model)
        training_time = time.time() - start_time
        
        if not success:
            return jsonify({
                "status": "error",
                "message": "Failed to save the trained model"
            }), 500
        
        return jsonify({
            "status": "success",
            "message": "Model trained and saved successfully with synthetic data",
            "details": {
                "n_samples": len(training_data),
                "contamination": contamination,
                "features": MODEL_FEATURES,
                "training_time": training_time
            }
        })
        
    except Exception as e:
        logging.error(f"Error in train_synthetic endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/train-upload', methods=['POST'])
def train_upload():
    """Train model with uploaded data"""
    try:
        import time
        import pandas as pd
        from aegis.config import MODEL_FEATURES
        
        # Check if file was uploaded
        if 'file' not in request.files:
            return jsonify({
                "status": "error",
                "message": "No file uploaded"
            }), 400
            
        file = request.files['file']
        
        # Check if filename is empty
        if file.filename == '':
            return jsonify({
                "status": "error",
                "message": "No file selected"
            }), 400
            
        # Check if file is a CSV
        if not file.filename.endswith('.csv'):
            return jsonify({
                "status": "error",
                "message": "Uploaded file must be a CSV file"
            }), 400
        
        # Read the CSV file
        try:
            data = pd.read_csv(file)
        except Exception as e:
            return jsonify({
                "status": "error",
                "message": f"Error reading CSV file: {str(e)}"
            }), 400
        
        # Check for required features
        missing_features = [f for f in MODEL_FEATURES if f not in data.columns]
        if missing_features:
            return jsonify({
                "status": "error",
                "message": f"Missing required features in CSV: {', '.join(missing_features)}"
            }), 400
        
        # Create and train model
        start_time = time.time()
        model = train_model_with_data(data)
        
        # Save the model
        success = save_model(model)
        training_time = time.time() - start_time
        
        if not success:
            return jsonify({
                "status": "error",
                "message": "Failed to save the trained model"
            }), 500
        
        return jsonify({
            "status": "success",
            "message": "Model trained and saved successfully with uploaded data",
            "details": {
                "n_samples": len(data),
                "features": MODEL_FEATURES,
                "training_time": training_time
            }
        })
        
    except Exception as e:
        logging.error(f"Error in train_upload endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

@api.route('/train-custom', methods=['POST'])
def train_custom():
    """Train model with custom parameters"""
    try:
        import time
        import numpy as np
        import pandas as pd
        from aegis.config import MODEL_FEATURES
        
        # Get parameters
        params = request.json or {}
        sample_count = int(params.get('sample_count', 5000))
        contamination = float(params.get('contamination', 0.1))
        normal_params = params.get('normal_params', {})
        
        # Validate parameters
        if sample_count < 1000 or sample_count > 50000:
            return jsonify({
                "status": "error",
                "message": "Sample count must be between 1,000 and 50,000"
            }), 400
            
        if contamination < 0.01 or contamination > 0.5:
            return jsonify({
                "status": "error",
                "message": "Contamination rate must be between 0.01 and 0.5"
            }), 400
        
        # Calculate number of normal and anomalous samples
        n_normal = int(sample_count * (1 - contamination))
        n_anomalous = sample_count - n_normal
        
        # Generate data with custom parameters
        # For temperature
        temp_mean = normal_params.get('temperature', {}).get('mean', 75)
        temp_var = normal_params.get('temperature', {}).get('var', 5)
        normal_temp = np.random.normal(temp_mean, temp_var, n_normal)
        anomalous_temp = np.concatenate([
            np.random.normal(temp_mean * 0.5, temp_var, n_anomalous // 3),
            np.random.normal(temp_mean * 1.5, temp_var * 2, n_anomalous // 3),
            np.random.normal(temp_mean, temp_var * 4, n_anomalous // 3)
        ])
        
        # For pressure
        pressure_mean = normal_params.get('pressure', {}).get('mean', 100)
        pressure_var = normal_params.get('pressure', {}).get('var', 10)
        normal_pressure = np.random.normal(pressure_mean, pressure_var, n_normal)
        anomalous_pressure = np.concatenate([
            np.random.normal(pressure_mean * 0.5, pressure_var, n_anomalous // 3),
            np.random.normal(pressure_mean * 1.5, pressure_var * 1.5, n_anomalous // 3),
            np.random.normal(pressure_mean, pressure_var * 3, n_anomalous // 3)
        ])
        
        # For RPM
        rpm_mean = normal_params.get('rpm', {}).get('mean', 3000)
        rpm_var = normal_params.get('rpm', {}).get('var', 200)
        normal_rpm = np.random.normal(rpm_mean, rpm_var, n_normal)
        anomalous_rpm = np.concatenate([
            np.random.normal(rpm_mean * 0.3, rpm_var, n_anomalous // 3),
            np.random.normal(rpm_mean * 1.7, rpm_var * 1.5, n_anomalous // 3),
            np.random.normal(rpm_mean, rpm_var * 4, n_anomalous // 3)
        ])
        
        # Create DataFrames
        normal_data = pd.DataFrame({
            "temperature": normal_temp,
            "pressure": normal_pressure,
            "rpm": normal_rpm
        })
        
        anomalous_data = pd.DataFrame({
            "temperature": anomalous_temp,
            "pressure": anomalous_pressure,
            "rpm": anomalous_rpm
        })
        
        # Combine and shuffle
        all_data = pd.concat([normal_data, anomalous_data])
        all_data = all_data.sample(frac=1).reset_index(drop=True)
        
        # Create and train model
        start_time = time.time()
        model = train_model_with_data(all_data)
        
        # Save the model
        success = save_model(model)
        training_time = time.time() - start_time
        
        if not success:
            return jsonify({
                "status": "error",
                "message": "Failed to save the trained model"
            }), 500
        
        return jsonify({
            "status": "success",
            "message": "Model trained and saved successfully with custom parameters",
            "details": {
                "n_samples": len(all_data),
                "normal_samples": n_normal,
                "anomalous_samples": n_anomalous,
                "contamination": contamination,
                "features": MODEL_FEATURES,
                "training_time": training_time
            }
        })
        
    except Exception as e:
        logging.error(f"Error in train_custom endpoint: {str(e)}")
        return jsonify({
            "status": "error",
            "message": f"An error occurred: {str(e)}"
        }), 500

def register_routes(app):
    """Register all API routes with the Flask app."""
    app.register_blueprint(api, url_prefix='/api')
    app.register_blueprint(web)
